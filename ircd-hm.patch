diff -cr irc2.10.3p3/common/msg_def.h irc2.10.3p3+HM2/common/msg_def.h
*** irc2.10.3p3/common/msg_def.h	Fri Jan 23 14:28:07 1998
--- irc2.10.3p3+HM2/common/msg_def.h	Mon Nov  5 20:03:37 2001
***************
*** 57,62 ****
--- 57,68 ----
  #define MSG_LUSERS   "LUSERS"	/* LUSE */
  #define MSG_MOTD     "MOTD"	/* MOTD */
  #define MSG_MODE     "MODE"	/* MODE */
+ #ifdef OPER_SMODE
+ #define MSG_SMODE    "SMODE"	/* SMODE */
+ #endif
+ #ifdef OPER_CLEAN
+ #define MSG_CLEAN    "CLEAN"	/* CLEAN */
+ #endif
  #define MSG_UMODE    "UMODE"	/* UMOD */
  #define MSG_KICK     "KICK"	/* KICK */
  #define	MSG_RECONECT "RECONNECT" /* RECONNECT -> RECO */
diff -cr irc2.10.3p3/common/parse.c irc2.10.3p3+HM2/common/parse.c
*** irc2.10.3p3/common/parse.c	Tue May 16 19:53:13 2000
--- irc2.10.3p3+HM2/common/parse.c	Mon Nov  5 20:03:37 2001
***************
*** 43,48 ****
--- 43,64 ----
  #endif
    { MSG_JOIN,    m_join,     MAXPARA, MSG_LAG|MSG_REGU, 0, 0, 0L},
    { MSG_MODE,    m_mode,     MAXPARA, MSG_LAG|MSG_REG, 0, 0, 0L},
+ #ifndef CLIENT_COMPILE
+ # ifdef OPER_SMODE
+ #  ifdef LOCOP_SMODE
+   { MSG_SMODE,   m_smode,    MAXPARA, MSG_REG|MSG_OP|MSG_LOP, 0, 0, 0L},
+ #  else
+   { MSG_SMODE,   m_smode,    MAXPARA, MSG_REG|MSG_OP, 0, 0, 0L},
+ #  endif
+ # endif
+ # ifdef OPER_CLEAN
+ #  ifdef LOCOP_CLEAN
+   { MSG_CLEAN,  m_clean,   MAXPARA, MSG_REG|MSG_OP|MSG_LOP, 0, 0, 0L},
+ #  else
+   { MSG_CLEAN,  m_clean,   MAXPARA, MSG_REG|MSG_OP, 0, 0, 0L},
+ #  endif
+ # endif
+ #endif
    { MSG_NICK,    m_nick,     MAXPARA, MSG_LAG, 0, 0, 0L},
    { MSG_PART,    m_part,     MAXPARA, MSG_LAG|MSG_REGU, 0, 0, 0L},
    { MSG_QUIT,    m_quit,     MAXPARA, MSG_LAG, 0, 0, 0L},
diff -cr irc2.10.3p3/common/send.c irc2.10.3p3+HM2/common/send.c
*** irc2.10.3p3/common/send.c	Thu Oct 18 23:43:05 2001
--- irc2.10.3p3+HM2/common/send.c	Mon Nov  5 20:03:37 2001
***************
*** 1391,1396 ****
--- 1391,1399 ----
  	{ SCH_SERVICE,	"&SERVICES",	NULL },
  	{ SCH_DEBUG,	"&DEBUG",	NULL },
  	{ SCH_AUTH,	"&AUTH",	NULL },
+ #ifdef SMODE_CHAN
+ 	{ SCH_SMODE,	"&SMODE",	NULL },
+ #endif
  };
  
  
Only in irc2.10.3p3+HM2/common: send.c.orig
diff -cr irc2.10.3p3/common/struct_def.h irc2.10.3p3+HM2/common/struct_def.h
*** irc2.10.3p3/common/struct_def.h	Mon May 14 14:02:08 2001
--- irc2.10.3p3+HM2/common/struct_def.h	Mon Nov  5 20:03:37 2001
***************
*** 174,179 ****
--- 174,180 ----
  #define	FLAGS_INVISIBLE  0x0008 /* makes user invisible */
  #define FLAGS_RESTRICTED 0x0010 /* Restricted user */
  #define FLAGS_AWAY       0x0020 /* user is away */
+ #define FLAGS_FORCE      0x0100 /* user can force channel modes */
  
  #define	SEND_UMODES	(FLAGS_INVISIBLE|FLAGS_OPER|FLAGS_WALLOP|FLAGS_AWAY)
  #define	ALL_UMODES	(SEND_UMODES|FLAGS_LOCOP|FLAGS_RESTRICTED)
***************
*** 183,188 ****
--- 184,190 ----
   */
  #define	IsOper(x)		((x)->user && (x)->user->flags & FLAGS_OPER)
  #define	IsLocOp(x)		((x)->user && (x)->user->flags & FLAGS_LOCOP)
+ #define	IsForce(x)		((x)->user && (x)->user->flags & FLAGS_FORCE)
  #define	IsInvisible(x)		((x)->user->flags & FLAGS_INVISIBLE)
  #define IsRestricted(x)         ((x)->user && \
  				 (x)->user->flags & FLAGS_RESTRICTED)
***************
*** 200,205 ****
--- 202,208 ----
  
  #define	SetOper(x)		((x)->user->flags |= FLAGS_OPER)
  #define	SetLocOp(x)    		((x)->user->flags |= FLAGS_LOCOP)
+ #define	SetForce(x)		((x)->user->flags |= FLAGS_FORCE)
  #define	SetInvisible(x)		((x)->user->flags |= FLAGS_INVISIBLE)
  #define SetRestricted(x)        ((x)->user->flags |= FLAGS_RESTRICTED)
  #define	SetWallops(x)  		((x)->user->flags |= FLAGS_WALLOP)
***************
*** 214,219 ****
--- 217,223 ----
  #define	NoNewLine(x)		((x)->flags & FLAGS_NONL)
  
  #define	ClearOper(x)		((x)->user->flags &= ~FLAGS_OPER)
+ #define	ClearForce(x)		((x)->user->flags &= ~FLAGS_FORCE)
  #define	ClearInvisible(x)	((x)->user->flags &= ~FLAGS_INVISIBLE)
  #define ClearRestricted(x)      ((x)->user->flags &= ~FLAGS_RESTRICTED)
  #define	ClearWallops(x)		((x)->user->flags &= ~FLAGS_WALLOP)
***************
*** 771,777 ****
  #define	SCH_SERVICE	9
  #define	SCH_DEBUG	10
  #define	SCH_AUTH	11
! #define	SCH_MAX		11
  
  /* used for async dns values */
  
--- 775,786 ----
  #define	SCH_SERVICE	9
  #define	SCH_DEBUG	10
  #define	SCH_AUTH	11
! #ifdef SMODE_CHAN
! #define SCH_SMODE	12
! #define SCH_MAX		12
! #else
! #define SCH_MAX         11
! #endif
  
  /* used for async dns values */
  
diff -cr irc2.10.3p3/common/support.c irc2.10.3p3+HM2/common/support.c
*** irc2.10.3p3/common/support.c	Thu May 31 16:00:02 2001
--- irc2.10.3p3+HM2/common/support.c	Mon Nov  5 20:03:37 2001
***************
*** 849,855 ****
  char *make_version()
  {
  	int ve, re, mi, dv, pl;
! 	char ver[15];
  
  	sscanf(PATCHLEVEL, "%2d%2d%2d%2d%2d", &ve, &re, &mi, &dv, &pl);
  	/* version & revision */
--- 849,855 ----
  char *make_version()
  {
  	int ve, re, mi, dv, pl;
! 	char ver[36];
  
  	sscanf(PATCHLEVEL, "%2d%2d%2d%2d%2d", &ve, &re, &mi, &dv, &pl);
  	/* version & revision */
***************
*** 861,866 ****
--- 861,867 ----
  		sprintf(ver + strlen(ver), "%c%d", DEVLEVEL, dv);
  	if (pl)	/* patchlevel */
  		sprintf(ver + strlen(ver), "p%d", pl);
+ 	strcat(ver,"+HM2");
  	return mystrdup(ver);
  }
  
diff -cr irc2.10.3p3/ircd/channel.c irc2.10.3p3+HM2/ircd/channel.c
*** irc2.10.3p3/ircd/channel.c	Sat Jul  7 16:29:33 2001
--- irc2.10.3p3+HM2/ircd/channel.c	Mon Nov  5 20:03:37 2001
***************
*** 611,616 ****
--- 611,623 ----
  	add_user_to_channel(chptr, mp, CHFL_CHANOP);
  	chptr->mode.mode = smode|MODE_SECRET;
  
+ #ifdef SMODE_CHAN
+ 	chptr = get_channel(mp, "&SMODE", CREATE);
+         strcpy(chptr->topic, "SERVER MESSAGES: oper server modes");
+         add_user_to_channel(chptr, mp, CHFL_CHANOP);
+         chptr->mode.mode = smode|MODE_SECRET; 
+ #endif
+ 
  	setup_svchans();
  }
  
***************
*** 854,859 ****
--- 861,974 ----
  	return;
  }
  
+   
+ #ifdef OPER_SMODE
+ /* 
+  * m_smode
+  * parv[0] - sender
+  * parv[1] - target (channel only)
+  * parv[2] - modes
+  * ...     - args
+  */
+ 
+ int 	m_smode(cptr, sptr, parc, parv)
+ aClient *cptr, *sptr;
+ int 	parc;
+ char	*parv[];
+ {
+     	aChannel *chptr = NULL;
+ 	int penalty = 0, i, j, k, is_arg;
+ 	char ch;
+ 	
+     	if (MyClient(sptr))
+ 	{
+ 		if (parc < 3)
+ 		{
+ 			sendto_one(sptr, err_str(ERR_NEEDMOREPARAMS, parv[0]), 
+                             "SMODE");
+ 			return 0;
+ 		}
+ 
+ 	    	clean_channelname(parv[1]);
+ 
+         	chptr = get_channel(sptr, parv[1], 0);
+ 
+ 	   	if (!chptr)
+ 		{
+ 			sendto_one(sptr, err_str(ERR_NOSUCHCHANNEL, parv[0]), 
+ 			    parv[1]);
+ 			return 0;
+ 		}
+ 
+ 		if (!UseModes(parv[1]))
+                 {
+ 			sendto_one(sptr, err_str(ERR_NOCHANMODES, parv[0]), 
+ 			    parv[1]); 
+ 			return 0;
+ 		}
+ 
+ 		/* If server mode +p is requested and channel has +s set, local
+ 		   server will do +p-s but all other servers will do -s only
+ 		   causing desynch. To avoid this we will remove all letters p
+ 		   from modes if +s is set on channel. */
+ 
+ 		if(SecretChannel(chptr))
+ 		{
+ 		    is_arg = 0;
+ 		    for (i = 2; i < parc; i++)
+ 		    {
+ 			if (is_arg)
+ 			    {
+ 			    is_arg = 0;
+ 			    continue;
+ 			    }
+ 			for (j = 0; j < strlen(parv[i]); j++)
+ 			    {
+ 			    if (parv[i][j] == 'p')
+ 				{
+ 				    do {
+ 					for (k = j; k < strlen(parv[i]); k++)
+ 					parv[i][k] = parv[i][k+1];
+ 					}
+ 				    while (parv[i][j] == 'p');
+ 				}
+ 			    }
+ 			ch = parv[i][strlen(parv[i])-1];
+ 			if (ch == 'o' || ch == 'v' || ch == 'l' ||
+ 			    ch == 'b' || ch == 'k' || ch == 'e' ||
+ 			    ch == 'I') is_arg = 1;
+ 		    }
+ 		}
+ 			
+ 		SetForce(sptr);
+ 
+ 		if (!set_mode(cptr, sptr, chptr, &penalty, parc - 2, 
+ 		    parv + 2, modebuf, parabuf)) 
+ 			return 0;
+ 
+ 		ClearForce(sptr);
+ 
+ #ifdef SMODE_CHAN
+ 		sendto_flag(SCH_SMODE, "Server mode: %s MODE %s %s %s from %s", 
+ 			    ME, parv[1], modebuf, parabuf, parv[0]);
+ #endif
+ 
+ 		if (modebuf[1] == 'e' || modebuf[1] == 'I')
+ 			sendto_match_servs_v(chptr, &me, SV_NMODE, 
+ 			    ":%s MODE %s %s %s", ME, parv[1], modebuf, 
+ 			    parabuf);
+ 		else
+                         sendto_match_servs(chptr, &me, ":%s MODE %s %s %s",
+                             ME, parv[1], modebuf, parabuf);
+ 
+     		sendto_channel_butserv(chptr, &me, ":%s MODE %s %s %s", ME, 
+ 	    	    parv[1], modebuf, parabuf);
+ 	}
+ 
+     	return 0;
+ }
+ #endif
+ 
  /*
   * m_mode
   * parv[0] - sender
***************
*** 1012,1018 ****
  
  	mode = &(chptr->mode);
  	bcopy((char *)mode, (char *)&oldm, sizeof(Mode));
! 	ischop = IsServer(sptr) || is_chan_op(sptr, chptr);
  	new = mode->mode;
  
  	while (curr && *curr && count >= 0)
--- 1127,1133 ----
  
  	mode = &(chptr->mode);
  	bcopy((char *)mode, (char *)&oldm, sizeof(Mode));
! 	ischop = IsServer(sptr) || is_chan_op(sptr, chptr) || IsForce(sptr);
  	new = mode->mode;
  
  	while (curr && *curr && count >= 0)
***************
*** 1060,1066 ****
  				    }
  				else /* not IsMember() */
  				    {
! 					if (!IsServer(sptr))
  					    {
  						sendto_one(sptr, err_str(ERR_NOTONCHANNEL, sptr->name),
  							    chptr->chname);
--- 1175,1181 ----
  				    }
  				else /* not IsMember() */
  				    {
! 					if (!IsServer(sptr) && !IsForce(sptr))
  					    {
  						sendto_one(sptr, err_str(ERR_NOTONCHANNEL, sptr->name),
  							    chptr->chname);
***************
*** 1099,1105 ****
  			    if (MyClient(sptr) || opcnt >= MAXMODEPARAMS + 1)
  #endif
  				break;
! 			if (!IsServer(sptr) && !IsMember(sptr, chptr))
  			    {
  				sendto_one(sptr, err_str(ERR_NOTONCHANNEL,
  								 sptr->name),
--- 1214,1220 ----
  			    if (MyClient(sptr) || opcnt >= MAXMODEPARAMS + 1)
  #endif
  				break;
! 			if (!IsServer(sptr) && !IsMember(sptr, chptr) && !IsForce(sptr))
  			    {
  				sendto_one(sptr, err_str(ERR_NOTONCHANNEL,
  								 sptr->name),
***************
*** 1120,1126 ****
  					   parv[0], chptr->chname);
  				break;
  			    }
! 			if (who == cptr && whatt == MODE_ADD && *curr == 'o')
  				break;
  
  			if (whatt == MODE_ADD)
--- 1235,1242 ----
  					   parv[0], chptr->chname);
  				break;
  			    }
! 			if (who == cptr && whatt == MODE_ADD && *curr == 'o'
! 			    && !IsForce(cptr))
  				break;
  
  			if (whatt == MODE_ADD)
***************
*** 1747,1752 ****
--- 1863,1876 ----
  {
  	Link	*lp = NULL, *banned;
  
+ #ifdef OPER_JOIN
+ # ifdef LOCOP_JOIN
+ 	if (IsAnOper(sptr)) return 0;
+ # else
+ 	if (IsOper(sptr)) return 0;
+ # endif
+ #endif
+ 	
  	if (chptr->users == 0 && (bootopt & BOOT_PROT) && 
  	    chptr->history != 0 && *chptr->chname != '!')
  		return (timeofday > chptr->history) ? 0 : ERR_UNAVAILRESOURCE;
***************
*** 1755,1760 ****
--- 1879,1898 ----
  		if (lp->value.chptr == chptr)
  			break;
  
+ #ifdef SMODE_CHAN
+         if (chptr->chname[0] == '&') 
+ 	{
+                 if (!strcmp(chptr->chname, "&SMODE") && 
+ #ifdef LOCOP_SMODE_CHAN
+ 			!IsAnOper(sptr)
+ #else
+ 		    	!IsOper(sptr)
+ #endif
+ 		   )
+                 	return (ERR_INVITEONLYCHAN);
+         }
+ #endif
+ 
  	if (banned = match_modeid(CHFL_BAN, sptr, chptr))
  		if (match_modeid(CHFL_EXCEPTION, sptr, chptr))
  			banned = NULL;
***************
*** 2913,2920 ****
      {
  	aChannel *chptr;
  	char	*name, *p = NULL;
! 	int	rlen = 0;
  
  	if (parc > 2 &&
  	    hunt_server(cptr, sptr, ":%s LIST %s %s", 2, parc, parv))
  		return 10;
--- 3051,3065 ----
      {
  	aChannel *chptr;
  	char	*name, *p = NULL;
! 	int	rlen = 0, show = 0;
  
+ #ifdef OPER_LIST
+ # ifdef LOCOP_LIST
+    if(IsAnOper(sptr)) show = 1;
+ # else
+    if(IsOper(sptr)) show = 1;
+ # endif
+ #endif
  	if (parc > 2 &&
  	    hunt_server(cptr, sptr, ":%s LIST %s %s", 2, parc, parv))
  		return 10;
***************
*** 2923,2931 ****
  		    {
  			if (!sptr->user ||
  			    !chptr->users ||	/* empty locked channel */
! 			    (SecretChannel(chptr) && !IsMember(sptr, chptr)))
  				continue;
! 			name = ShowChannel(sptr, chptr) ? chptr->chname : NULL;
  			rlen += sendto_one(sptr, rpl_str(RPL_LIST, parv[0]),
  				   name ? name : "*", chptr->users,
  				   name ? chptr->topic : "");
--- 3068,3080 ----
  		    {
  			if (!sptr->user ||
  			    !chptr->users ||	/* empty locked channel */
! 			    ((SecretChannel(chptr) && !IsMember(sptr, chptr))
! 			     && !show))
  				continue;
! 			if (show)
! 			    name = 1 ? chptr->chname : NULL;
! 			else
! 			    name = ShowChannel(sptr, chptr) ? chptr->chname : NULL;
  			rlen += sendto_one(sptr, rpl_str(RPL_LIST, parv[0]),
  				   name ? name : "*", chptr->users,
  				   name ? chptr->topic : "");
***************
*** 2937,2943 ****
  		for (; (name = strtoken(&p, parv[1], ",")); parv[1] = NULL)
  		    {
  			chptr = find_channel(name, NullChn);
! 			if (chptr && ShowChannel(sptr, chptr) && sptr->user)
  			    {
  				rlen += sendto_one(sptr, rpl_str(RPL_LIST,
  						   parv[0]), name,
--- 3086,3093 ----
  		for (; (name = strtoken(&p, parv[1], ",")); parv[1] = NULL)
  		    {
  			chptr = find_channel(name, NullChn);
! 			if (chptr && (ShowChannel(sptr, chptr) || show)
! 			    && sptr->user)
  			    {
  				rlen += sendto_one(sptr, rpl_str(RPL_LIST,
  						   parv[0]), name,
***************
*** 2950,2956 ****
  				chptr = NULL;
  				while (chptr=hash_find_channels(name+1, chptr))
  				    {
! 					int scr = SecretChannel(chptr) &&
  							!IsMember(sptr, chptr);
  					rlen += sendto_one(sptr,
  							   rpl_str(RPL_LIST,
--- 3100,3110 ----
  				chptr = NULL;
  				while (chptr=hash_find_channels(name+1, chptr))
  				    {
! 					int scr;
! 					if (show)
! 					    scr = 0;
! 					else
! 					    scr = SecretChannel(chptr) &&
  							!IsMember(sptr, chptr);
  					rlen += sendto_one(sptr,
  							   rpl_str(RPL_LIST,
***************
*** 3453,3455 ****
--- 3607,3752 ----
  	/* Check again after CHECKFREQ seconds */
  	return (time_t) (now + CHECKFREQ);
  }
+ 
+ #ifdef OPER_CLEAN
+ /* 
+  * m_clean
+  * parv[0] - sender
+  * parv[1] - channel
+  */
+ 
+ int 	m_clean(cptr, sptr, parc, parv)
+ aClient *cptr, *sptr;
+ int 	parc;
+ char	*parv[];
+ {
+     	aChannel *chptr;
+ 	Link *p;
+ 	char *q, deopbuf[BUFSIZ] = { 0 }, deoptmp[BUFSIZ] = { 0 };
+ 	int deopcount = 0, newchan;
+ 
+ 	if (!MyClient(sptr))
+ 	    	return 0;
+ 
+ 	if (parc < 2)
+ 	{
+ 		sendto_one(sptr, err_str(ERR_NEEDMOREPARAMS, parv[0]), 
+ 		    "CLEAN");
+ 		return 0;
+ 	}
+ 
+ 	clean_channelname(q = parv[1]);
+ 
+ 	chptr = get_channel(sptr, parv[1], 0);
+ 
+ 	if (!chptr)
+ 	{
+ 	    	sendto_one(sptr, err_str(ERR_NOSUCHCHANNEL, parv[0]), parv[1]);
+ 		return 0;
+ 	}
+ 
+ 	if (!UseModes(parv[1]))
+ 	{
+ 		sendto_one(sptr, err_str(ERR_NOCHANMODES, parv[0]), parv[1]); 
+ 		return 0;
+ 	}
+ 
+ 	newchan = parv[1][1] == '!';
+ 
+ 	for (p = chptr->members; p; p = p->next)
+  	{
+ 	    	if (is_chan_op(p->value.cptr, chptr))
+ 		{
+ 		    	p->flags = CHFL_CHANOP & MODE_DEL;
+ 			change_chan_flag(p, chptr);
+ 			strcat(deoptmp, p->value.cptr->name);
+ 		    	strcat(deoptmp, " ");
+ 			deopcount++;
+ 			if (deopcount == 3)
+ 			{
+ 		    	strcat(deopbuf, "-ooo ");
+ 		    	strcat(deopbuf, deoptmp);
+ 				if (newchan)
+ 					sendto_match_servs_v(chptr, &me, 
+ 					    SV_NCHAN, ":%s MODE %s %s", ME, 
+ 					    parv[1], deopbuf);
+ 				else
+ 					sendto_match_servs(chptr, &me, 
+ 					    ":%s MODE %s %s", ME, parv[1],
+ 					    deopbuf);
+ #ifdef SMODE_CHAN
+ 			sendto_flag(SCH_SMODE, "Server mode: %s MODE %s %s from %s", 
+ 			    ME, parv[1], deopbuf, parv[0]);
+ #endif
+ 				sendto_channel_butserv(chptr, &me, 
+ 				    ":%s MODE %s %s", ME, parv[1], deopbuf);
+ 
+ 				deopbuf[0] = 0;
+ 				deoptmp[0] = 0;
+ 				deopcount = 0;
+ 			}
+ 		}
+ 	}
+ 
+ 	if (deopcount)
+ 	{
+ 	    	if(deopcount == 1) strcat(deopbuf, "-o ");
+ 	    	else strcat(deopbuf, "-oo ");
+ 	    	strcat(deopbuf, deoptmp);
+ #ifdef SMODE_CHAN
+ 		sendto_flag(SCH_SMODE, "Server mode: %s MODE %s %s from %s", 
+ 		    ME, parv[1], deopbuf, parv[0]);
+ #endif
+ 		if (newchan)
+ 			sendto_match_servs_v(chptr, &me, 
+ 			    SV_NCHAN, ":%s MODE %s %s", ME, 
+ 			    parv[1], deopbuf);
+ 		else
+ 			sendto_match_servs(chptr, &me, 
+ 			    ":%s MODE %s %s", ME, parv[1],
+ 			    deopbuf);
+ 
+ 		sendto_channel_butserv(chptr, &me, 
+ 		    ":%s MODE %s %s", ME, parv[1], deopbuf);
+ 	}
+ 
+ 	if (IsMember(sptr, chptr))
+ 	{
+ 		if (newchan)
+ 			sendto_match_servs_v(chptr, cptr, SV_NCHAN,
+ 			    ":%s PART %s", parv[0], parv[1]);
+ 		else
+ 			sendto_match_servs(chptr, cptr, ":%s PART %s",
+ 			    parv[0], parv[1]);
+ 
+ 		sendto_channel_butserv(chptr, cptr, ":%s PART %s", parv[0],
+ 		    parv[1]);
+ 		
+ 	    	remove_user_from_channel(sptr, chptr);
+ 	}
+ 
+ 	add_user_to_channel(chptr, sptr, CHFL_CHANOP);
+ 	
+ #ifdef SMODE_CHAN
+ 	sendto_flag(SCH_SMODE, "Server mode: %s JOIN %s with mode +o", 
+ 	    parv[0], parv[1]);
+ #endif
+ 
+ 	if (newchan)
+ 		sendto_match_servs_v(chptr, cptr, SV_NCHAN,
+ 		    ":%s JOIN %s\007o", parv[0], parv[1]);
+ 	else
+ 		sendto_match_servs(chptr, cptr, ":%s JOIN %s\007o",
+ 		    parv[0], parv[1]);
+ 
+ 	sendto_channel_butserv(chptr, cptr, ":%s JOIN %s", parv[0],
+ 	    parv[1]);
+ 
+ 	m_names(cptr, sptr, 2, parv);
+ 	
+ 	sendto_channel_butserv(chptr, cptr, ":%s MODE %s +o %s", ME,
+ 	    parv[1], sptr->name);
+ 	
+ 	return 0;
+ }
+ #endif
diff -cr irc2.10.3p3/ircd/channel_ext.h irc2.10.3p3+HM2/ircd/channel_ext.h
*** irc2.10.3p3/ircd/channel_ext.h	Fri Jan 23 14:28:13 1998
--- irc2.10.3p3+HM2/ircd/channel_ext.h	Mon Nov  5 20:03:37 2001
***************
*** 45,50 ****
--- 45,57 ----
  EXTERN void send_channel_modes __P((aClient *cptr, aChannel *chptr));
  EXTERN void send_channel_members __P((aClient *cptr, aChannel *chptr));
  EXTERN int m_mode __P((aClient *cptr, aClient *sptr, int parc, char *parv[]));
+ #ifdef OPER_SMODE
+ EXTERN int m_smode __P((aClient *cptr, aClient *sptr, int parc, char *parv[]));
+ #endif
+ #ifdef OPER_CLEAN
+ EXTERN int m_clean __P((Reg aClient *cptr, Reg aClient *sptr, int parc, 
+ 	               char *parv[]));
+ #endif
  EXTERN void clean_channelname __P((Reg char *cn));
  EXTERN void del_invite __P((aClient *cptr, aChannel *chptr));
  EXTERN int m_join __P((Reg aClient *cptr, Reg aClient *sptr, int parc,
diff -cr irc2.10.3p3/ircd/s_debug.c irc2.10.3p3+HM2/ircd/s_debug.c
*** irc2.10.3p3/ircd/s_debug.c	Fri Oct 19 20:44:27 2001
--- irc2.10.3p3+HM2/ircd/s_debug.c	Mon Nov  5 20:03:37 2001
***************
*** 150,155 ****
--- 150,200 ----
  #endif
  '\0'};
  
+ char	hmopts[] = {
+ #if defined(LOCOP_CLEAN) && defined(OPER_CLEAN)
+ 'c',
+ #endif
+ #ifdef	OPER_CLEAN
+ 'C',
+ #endif
+ #if defined(LOCOP_WHOIS) && defined(OPER_WHOIS)
+ 'i',
+ #endif
+ #ifdef	OPER_WHOIS
+ 'I',
+ #endif
+ #if defined(LOCOP_JOIN) && defined(OPER_JOIN)
+ 'j',
+ #endif
+ #ifdef	OPER_JOIN
+ 'J',
+ #endif
+ #if defined(LOCOP_LIST) && defined(OPER_LIST)
+ 'l',
+ #endif
+ #ifdef	OPER_LIST
+ 'L',
+ #endif
+ #if defined(LOCOP_SMODE) && defined(OPER_SMODE)
+ 'm',
+ #endif
+ #ifdef	OPER_SMODE
+ 'M',
+ #endif
+ #if defined(LOCOP_SMODE_CHAN) && defined(SMODE_CHAN)
+ 's',
+ #endif
+ #ifdef	SMODE_CHAN
+ 'S',
+ #endif
+ #if defined(LOCOP_WHO) && defined(OPER_WHO)
+ 'w',
+ #endif
+ #ifdef	OPER_WHO
+ 'W',
+ #endif
+ '\0'};
+ 
  #ifdef DEBUGMODE
  static	char	debugbuf[2*READBUF_SIZE]; /* needs to be big.. */
  
***************
*** 358,363 ****
--- 403,410 ----
  		   -1, -1
  #endif
  		   );
+ 	sendto_one(cptr, ":%s %d %s :HM:%s",
+ 		   ME, RPL_STATSDEFINE, nick, hmopts);
  }
  
  void	count_memory(cptr, nick, debug)
diff -cr irc2.10.3p3/ircd/s_err.c irc2.10.3p3+HM2/ircd/s_err.c
*** irc2.10.3p3/ircd/s_err.c	Sat Feb 10 20:11:06 2001
--- irc2.10.3p3+HM2/ircd/s_err.c	Mon Nov  5 20:03:37 2001
***************
*** 247,253 ****
  		{ 0, (char *)NULL },
  		{ 0, (char *)NULL },
  		{ 0, (char *)NULL },
! /* 381 */	{ RPL_YOUREOPER, ":You are now an IRC Operator" },
  /* 382 */	{ RPL_REHASHING, "%s :Rehashing" },
  /* 383 */	{ RPL_YOURESERVICE, ":You are service %s" },
  /* 384 */	{ RPL_MYPORTIS, "%d :Port to local server is\r\n" },
--- 247,253 ----
  		{ 0, (char *)NULL },
  		{ 0, (char *)NULL },
  		{ 0, (char *)NULL },
! /* 381 */	{ RPL_YOUREOPER, ":You are now an immortal bastard" },
  /* 382 */	{ RPL_REHASHING, "%s :Rehashing" },
  /* 383 */	{ RPL_YOURESERVICE, ":You are service %s" },
  /* 384 */	{ RPL_MYPORTIS, "%d :Port to local server is\r\n" },
diff -cr irc2.10.3p3/ircd/s_user.c irc2.10.3p3+HM2/ircd/s_user.c
*** irc2.10.3p3/ircd/s_user.c	Fri Oct 19 15:56:55 2001
--- irc2.10.3p3+HM2/ircd/s_user.c	Mon Nov  5 20:03:37 2001
***************
*** 1347,1352 ****
--- 1347,1359 ----
  	if (!IsAnonymous(chptr))
  	    {
  		member = IsMember(sptr, chptr);
+ #ifdef OPER_WHO
+ #  ifdef LOCOP_WHO
+ 		if(IsAnOper(sptr)) member = 1;
+ #  else
+ 		if(IsOper(sptr)) member = 1;
+ #  endif
+ #endif
  		if (member || !SecretChannel(chptr))
  			for (lp = chptr->members; lp; lp = lp->next)
  			    {
***************
*** 1419,1424 ****
--- 1426,1438 ----
  		    }
  		if (!acptr->user->channel && !isinvis)
  			showperson = 1;
+ #ifdef OPER_WHO
+ #  ifdef LOCOP_WHO
+ 		if(IsAnOper(sptr)) showperson = 1;
+ #  else
+ 		if(IsOper(sptr)) showperson = 1;
+ #  endif
+ #endif
  		/*
  		** This is brute force solution, not efficient...? ;( 
  		** Show entry, if no mask or any of the fields match
***************
*** 1592,1598 ****
  	anUser	*user;
  	aChannel *chptr;
  	aClient *a2cptr;
! 	int len, mlen;
  	char *name;
  
  	user = acptr->user ? acptr->user : &UnknownUser;
--- 1606,1612 ----
  	anUser	*user;
  	aChannel *chptr;
  	aClient *a2cptr;
! 	int len, mlen, show = 0;
  	char *name;
  
  	user = acptr->user ? acptr->user : &UnknownUser;
***************
*** 1608,1615 ****
  	for (len = 0, *buf = '\0', lp = user->channel; lp; lp = lp->next)
  	    {
  		chptr = lp->value.chptr;
  		if ((!IsAnonymous(chptr) || acptr == sptr) &&
! 		    ShowChannel(sptr, chptr))
  		    {
  			if (len + strlen(chptr->chname)
  			    > (size_t) BUFSIZE - 4 - mlen)
--- 1622,1636 ----
  	for (len = 0, *buf = '\0', lp = user->channel; lp; lp = lp->next)
  	    {
  		chptr = lp->value.chptr;
+ #ifdef OPER_WHOIS
+ #  ifdef LOCOP_WHOIS
+ 		if(IsAnOper(sptr)) show = 1;
+ #  else
+ 		if(IsOper(sptr)) show = 1;
+ #  endif
+ #endif
  		if ((!IsAnonymous(chptr) || acptr == sptr) &&
! 		    (ShowChannel(sptr, chptr) || show))
  		    {
  			if (len + strlen(chptr->chname)
  			    > (size_t) BUFSIZE - 4 - mlen)
